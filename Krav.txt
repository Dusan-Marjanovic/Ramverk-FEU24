För Godkänd (G)

Följande krav ska uppfyllas:

1. Webbanrop

x Webbanrop görs och information från en eller flera webbtjänster visas i webbapplikationen.
x Undvik CORS-problem och använd helst HTTPS (för att applikationen ska fungera bra som publicerad).
x Visa åtminstone tre värden (obs: sidan måste vara innehållsrik och fylla ett syfte).
x Använd inte Cities-tjänsten eller någon annan webbtjänst som tagits upp som exempel.

2. Vue-funktionalitet
x Textinterpolering ({{ och }}) används.
x Attributinterpolering (v-bind eller dess kortform) används (key-props relaterade till v-for räknas inte).
x Villkorlig rendering (v-if) används.
x Listrendering (v-for) används.
x Händelser (v-on eller dess kortform) används.
x v-model (och värdet som matas in) används.


3. Vue Router
x Skapa en Single Page Application med minst två webbsidor med hjälp av Vue Router.
x Använd både router-link och router-view.


4. Komponenter
x Minst en icke-Vue-Router-.vue-komponent ska skapas (App.vue räknas inte).
x Minst en komponent ska ta emot och använda minst en prop (via props-nyckeln).


5. GitHub
- Källkoden för projektet publiceras på GitHub (eller liknande).

6. Skriftlig rapport
- En kortfattad rapport ska lämnas in där du beskriver och motiverar de tekniska val du gjort under projektet.
- Rapporten ska också innehålla reflektioner över lärdomar och utmaningar.
- Syftet är att minimera risken för fusk och visa att du förstår de val du gjort, enstaka frågor kan även komma från mig som lärare.
- Rapporten lämnas in som en PDF eller Word-fil.

---

För Väl Godkänd (VG)

Utöver kraven för G ska följande uppfyllas:


1. Webbanrop
- Använd någonting annat än fetch (t.ex. Axios) för att göra webbanropen.

2. Vue-funktionalitet
x Minst en beräknad egenskap (computed) används.
x Minst en bevakare (watch) används.
- Alla props ska vara typsäkra.
- Minst ett custom event används (skickas och tas emot).

3. State Management
- Använd Pinia för att lagra och dela information mellan flera komponenter.

4. Vue Router
x Använd minst ett Vue Router-adressparametervärde.

5. Grafisk design och kodkvalitet
- Använd Bootstrap, Vuetify eller ett annat grafiskt ramverk.
- Det finns en ESLint-konfiguration för projektet, som alla filer följer.
- Det finns en Prettier-konfiguration för projektet, som alla filer följer.

6. Skriftlig rapport (utökat krav)
- Rapporten för VG ska vara mer detaljerad och innehålla en djupare teknisk genomgång av de lösningar du implementerat.
- Beskriv också hur du hanterat mer avancerade krav som t.ex. state management med Pinia och adressparametervärden med Vue Router.

---

Options API och Composition API

- Options API: Implementera funktionaliteten med data, methods, computed och andra relaterade delar.
- Composition API: Implementera funktionaliteten med setup(), ref() och reactive().
Du väljer själv vilket API du vill använda. Om du vill, kan du även kombinera båda.

---

Inlämning och regler

1. Inlämning
- Projektet lämnas in med en länk till ditt repo på GitHub (eller liknande).
- Rapporten lämnas in som en separat PDF eller Word-fil.
